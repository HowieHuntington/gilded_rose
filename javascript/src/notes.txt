Notes, learning lessons, and things to practice: 

- Initially in this assessment, I overlooked the thought of using git.  This was a goofy slip up that I have never neglected in the workplace,
but a great learning lesson and something to be cognizant of in these types of challenges.  

- SLOWING DOWN!!!..  I was rushing myself a bit and my thoughts became hard to organize which cost me time in the end.  I need to slow down, and write
detailed comments in the code when making changes which I can remove before committing.  Additionally, if given the chance to do over, I would commit 
small and commit often.  

- I learned to put my faith in the passing unit tests.  These were my source of truth and I should have leaned on them more.  

- My strategy involved breaking down the monolith by taking one use case and expanding from there.  After I refactored one 
or two items, I recognized a pattern and things moved quickly from there. 

- There were some hints that I didnt pick up on.  Thinking about the problem wholistically would have been a tell that "Hammer" doesn't degrade in 
quality like other expirable foods.  

- When refactoring, it's more efficient to copy large code segments into the new functions first and then eliminate unnecessary parts,
rather than making changes line by line.

- Collapsing the if's to hide logic that is unnecessary is helpful when whittling down the monolithic code

- If I hade more time to commit to this kata, I would continue adding a few more test cases to the Raw Milk function, and explore
more areas of refactoring in each helper function.  